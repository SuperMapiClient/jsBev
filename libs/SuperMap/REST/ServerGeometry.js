/* Copyright (c) 2000-2011 by SuperMap Software Co., Ltd.*//** * @requires SuperMap/Util.js * @requires SuperMap/BaseTypes/Bounds.js * @requires SuperMap/Geometry/Point.js * @requires SuperMap/Geometry/MultiPoint.js * @requires SuperMap/Geometry/LinearRing.js * @requires SuperMap/Geometry/LineString.js * @requires SuperMap/Geometry/MultiLineString.js * @requires SuperMap/Geometry/Polygon.js * @requires SuperMap/Geometry/MultiPolygon.js * @requires SuperMap/REST.js * @requires SuperMap/REST/ServerStyle.js * @requires SuperMap/REST/Point2D.js *//** * Class: SuperMap.REST.ServerGeometry * 服务端几何对象类。 * 该类描述几何对象（矢量）的特征数据（坐标点对、几何对象的类型等）。 * 基于服务端的空间分析、空间关系运算、查询等 GIS 服务功能使用服务端几何对象。 */SuperMap.REST.ServerGeometry = SuperMap.Class({        /**      * APIProperty: id     * {String} 服务端几何对象唯一标识符。       */    id: 0,        /**      * APIProperty: style     * {<SuperMap.REST.ServerStyle>} 服务端几何对象的风格(ServerStyle)。        */    style: null,        /**      * APIProperty: parts     * {Array(Number)} 服务端几何对象中各个子对象所包含的节点个数。     * 1.几何对象从结构上可以分为简单几何对象和复杂几何对象。     * 简单几何对象与复杂几何对象的区别：简单的几何对象一般为单一对象，     * 而复杂的几何对象由多个简单对象组成或经过一定的空间运算之后产生，     * 如：矩形为简单的区域对象，而中空的矩形为复杂的区域对象。     * 2.通常情况，一个简单几何对象的子对象就是它本身，     * 因此对于简单对象来说的该字段为长度为1的整型数组，     * 该字段的值就是这个简单对象节点的个数。     * 如果一个几何对象是由几个简单对象组合而成的，     * 例如，一个岛状几何对象由3个简单的多边形组成而成，     * 那么这个岛状的几何对象的 Parts 字段值就是一个长度为3的整型数组，     * 数组中每个成员的值分别代表这三个多边形所包含的节点个数。      */    parts: null,        /**      * APIProperty: points     * {Array(<SuperMap.Geometry.Point>)} 组成几何对象的节点的坐标对数组。     * 1.所有几何对象（点、线、面）都是由一些简单的点坐标组成的，     * 该字段存放了组成几何对象的点坐标的数组。     * 对于简单的面对象，他的起点和终点的坐标点相同。     * 2.对于复杂的几何对象，根据 Parts 属性来确定每一个组成复杂几何对象的简单对象所对应的节点的个数，     * 从而确定 Points 字段中坐标对的分配归属问题。      */    points: null,        /**      * APIProperty: type     * {<SuperMap.REST.GeometryType>} 几何对象的类型(GeometryType)。       */    type: null,        /**     * Constructor: SuperMap.REST.ServerGeometry     * 服务端几何对象类构造函数。     *     * Parameters:     * options - {Object} 参数。     *     * Allowed options properties:     * id - {String} 服务端几何对象唯一标识符。     * style - {<SuperMap.REST.ServerStyle>}  服务端几何对象的风格。     * parts - {Array(Number)} 服务端几何对象中各个子对象所包含的节点个数。     * points - {Array(<SuperMap.Geometry.Point>)} 组成几何对象的节点的坐标对数组。     * type - {<SuperMap.REST.GeometryType>} 几何对象的类型。     */    initialize: function(options) {        if (options) {            SuperMap.Util.extend(this, options);        }    },        /**     * APIMethod: destroy     * 释放资源，将引用资源的属性置空。     */    destroy: function() {        var me = this;        me.id = null;        me.style = null;        me.parts = null;        me.points = null;        me.type = null;    },        /**     * APIMethod: toGeometry     * 将服务端几何对象 ServerGeometry 转换为客户端几何对象 Geometry。     *     * Returns     * {<SuperMap.Geometry>} 转换后的客户端几何对象。        */    toGeometry: function() {        var me = this,            geoType = me.type;        switch (geoType) {            case SuperMap.REST.GeometryType.POINT:                return me.toGeoPoint();            case SuperMap.REST.GeometryType.LINE:                return me.toGeoLine();			case SuperMap.REST.GeometryType.LINEM:				return me.toGeoLinem();            case SuperMap.REST.GeometryType.REGION:                return me.toGeoRegion();        }        },        /**     * Method: toGeoPoint     * 将服务端的点几何对象转换为客户端几何对象。     * 包括 SuperMap.Geometry.Point 、SuperMap.Geometry.MultiPoint。     *     * Returns     * {<SuperMap.Geometry>} 转换后的客户端几何对象。     */    toGeoPoint: function() {        var me = this,            geoParts = me.parts || [],            geoPoints = me.points||[],            len = geoParts.length;            if (len > 0) {                if (len === 1) {                    return new SuperMap.Geometry.Point(geoPoints[0].x,geoPoints[0].y);                } else {                    for (var i=0,pointList=[]; i<len; i++) {                        pointList.push(new SuperMap.Geometry.Point(geoPoints[i].x,geoPoints[i].y));                    }                    return new SuperMap.Geometry.MultiPoint(pointList);                }            } else {                return null;            }    },        /**     * Method: toGeoLine     * 将服务端的线几何对象转换为客户端几何对象。     * 包括SuperMap.Geometry.LinearRing、SuperMap.Geometry.LineString、SuperMap.Geometry.MultiLineString。     *     * Returns     * {<SuperMap.Geometry>} 转换后的客户端几何对象。     */    toGeoLine: function() {        var me = this,            geoParts = me.parts || [],            geoPoints = me.points||[],            len = geoParts.length;		if (len > 0) {			if (len === 1) {				for (var i=0,pointList=[]; i<geoParts[0]; i++) {					pointList.push(new SuperMap.Geometry.Point(geoPoints[i].x,geoPoints[i].y));				}				//判断线是否闭合，如果闭合，则返回LinearRing，否则返回LineString				if (pointList[0].equals(pointList[geoParts[0]-1])){					return new SuperMap.Geometry.LinearRing(pointList);				}else{					return new SuperMap.Geometry.LineString(pointList);				}			} else {				for (var i=0,lineList=[]; i<len; i++) {					for (var j=0,pointList=[]; j<geoParts[i]; j++) {						pointList.push(new SuperMap.Geometry.Point(geoPoints[j].x,geoPoints[j].y));					}					lineList.push(new SuperMap.Geometry.LineString(pointList));					geoPoints.splice(0, geoParts[i]);				}				return new SuperMap.Geometry.MultiLineString(lineList);			}		} else {			return null;		}    },    	/**     * Method: toGeoLine     * 将服务端的路由线几何对象转换为客户端几何对象。     * 包括SuperMap.Geometry.LinearRing、SuperMap.Geometry.LineString、SuperMap.Geometry.MultiLineString。     *     * Returns     * {<SuperMap.Geometry>} 转换后的客户端几何对象。     */	toGeoLinem: function() {		var me = this,            geoParts = me.parts || [],            geoPoints = me.points||[],            len = geoParts.length;		if (len > 0) {			if (len === 1) {				for (var i=0,pointList=[]; i<geoParts[0]; i++) {					pointList.push(new SuperMap.Geometry.Point(geoPoints[i].x,geoPoints[i].y));				}				//判断线是否闭合，如果闭合，则返回LinearRing，否则返回LineString				if (pointList[0].equals(pointList[geoParts[0]-1])){					return new SuperMap.Geometry.LinearRing(pointList);				}else{					return new SuperMap.Geometry.LineString(pointList);				}			} else {				for (var i=0,lineList=[]; i<len; i++) {					for (var j=0,pointList=[]; j<geoParts[i]; j++) {						pointList.push(new SuperMap.Geometry.Point(geoPoints[j].x,geoPoints[j].y));					}					lineList.push(new SuperMap.Geometry.LineString(pointList));					geoPoints.splice(0, geoParts[i]);				}				return new SuperMap.Geometry.MultiLineString(lineList);			}		} else {			return null;		}	},	    /**     * Method: toGeoRegion     * 将服务端的面几何对象转换为客户端几何对象。     * 类型为SuperMap.Geometry.Polygon。     *     * Returns     * {<SuperMap.Geometry>} 转换后的客户端几何对象。     */    toGeoRegion: function() {        var me = this,            geoParts = me.parts || [],            geoPoints = me.points||[],            len = geoParts.length;        if (len > 0) {            var linearRingArray = new Array();            for (var i=0, pointIndex=0, pointList=[]; i<len; i++) {                for (var j=0; j<geoParts[i]; j++) {                    pointList.push(new SuperMap.Geometry.Point(geoPoints[pointIndex+j].x,geoPoints[pointIndex+j].y));                }                pointIndex += geoParts[i];                linearRingArray.push(new SuperMap.Geometry.LinearRing(pointList));                pointList = [];            }            return new SuperMap.Geometry.Polygon(linearRingArray);        } else {            return null;        }    },            CLASS_NAME: "SuperMap.REST.ServerGeometry"    });/** * Function: SuperMap.REST.ServerGeometry.fromJson * 将 JSON 对象表示服务端几何对象转换为 ServerGeometry。   * * Parameters: * jsonObject - {Object} 要转换的 JSON 对象。  * * Returns: * {<SuperMap.REST.ServerGeometry>} 转化后的 ServerGeometry 对象。 */SuperMap.REST.ServerGeometry.fromJson = function(jsonObject) {    if (!jsonObject) {        return;    }    return new SuperMap.REST.ServerGeometry({            id: jsonObject.id,        style: SuperMap.REST.ServerStyle.fromJson(jsonObject.style),        parts: jsonObject.parts,        points: jsonObject.points,        type: jsonObject.type    });};/** * Function: SuperMap.REST.ServerGeometry.fromGeometry * 将客户端Geometry转换成服务端ServerGeometry。   * * Parameters: * geometry - {<SuperMap.Geometry>} 要转换的客户端Geometry对象。   * * Returns: * {<SuperMap.REST.ServerGeometry>} 转化后的 ServerGeometry 对象。 */SuperMap.REST.ServerGeometry.fromGeometry = function(geometry) {    if (!geometry) {        return;    }    var id = 0,        parts = [],        points = [],        type = null,        icomponents = geometry.components,        className = geometry.CLASS_NAME;	if(!isNaN(geometry.id)) {		id = geometry.id;  	}    if (className === "SuperMap.Geometry.MultiPoint" || className==="SuperMap.Geometry.MultiLineString") {        var ilen = icomponents.length;        for (var i=0; i<ilen; i++) {            var partPointsCount = icomponents[i].getVertices().length;            parts.push(partPointsCount);            for (var j=0; j<partPointsCount; j++) {                points.push(new SuperMap.Geometry.Point(icomponents[i].getVertices()[j].x, icomponents[i].getVertices()[j].y));            }        }        type = (className === "SuperMap.Geometry.MultiPoint") ? SuperMap.REST.GeometryType.POINT : SuperMap.REST.GeometryType.LINE;    } else if (className === "SuperMap.Geometry.MultiPolygon") {        var ilen = icomponents.length;        for (var i=0; i<ilen; i++) {            var polygon = icomponents[i],                linearRingOfPolygon = polygon.components,                linearRingOfPolygonLen = linearRingOfPolygon.length;            for (var j=0; j<linearRingOfPolygonLen; j++) {                var partPointsCount = linearRingOfPolygon[j].getVertices().length+1;                parts.push(partPointsCount);                for (var k=0; k<partPointsCount-1; k++) {                    points.push(new SuperMap.Geometry.Point(linearRingOfPolygon[j].getVertices()[k].x, linearRingOfPolygon[j].getVertices()[k].y));                }                points.push(new SuperMap.Geometry.Point(linearRingOfPolygon[j].getVertices()[0].x, linearRingOfPolygon[j].getVertices()[0].y));            }        }        type = SuperMap.REST.GeometryType.REGION;    } else if (className === "SuperMap.Geometry.Polygon") {        var ilen = icomponents.length;        for (var i=0; i<ilen; i++) {            var partPointsCount = icomponents[i].getVertices().length + 1;            parts.push(partPointsCount);            for (var j=0; j<partPointsCount-1; j++) {                points.push(new SuperMap.Geometry.Point(icomponents[i].getVertices()[j].x, icomponents[i].getVertices()[j].y));            }            points.push(new SuperMap.Geometry.Point(icomponents[i].getVertices()[0].x, icomponents[i].getVertices()[0].y));        }        type = SuperMap.REST.GeometryType.REGION;    } else {        var geometryVerticesCount = geometry.getVertices().length;        for (var j=0; j<geometryVerticesCount; j++) {            points.push(new SuperMap.Geometry.Point(geometry.getVertices()[j].x, geometry.getVertices()[j].y));        }        if (className === "SuperMap.Geometry.LinearRing") {            points.push(new SuperMap.Geometry.Point(geometry.getVertices()[0].x, geometry.getVertices()[0].y));            geometryVerticesCount++;        }        parts.push(geometryVerticesCount);        type = (className === "SuperMap.Geometry.Point") ? SuperMap.REST.GeometryType.POINT : SuperMap.REST.GeometryType.LINE;    }    return new SuperMap.REST.ServerGeometry({        id: id,        style: null,        parts: parts,        points: points,        type: type    });};